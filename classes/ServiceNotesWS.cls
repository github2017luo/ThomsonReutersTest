/**
 * Contains helper methods for ServiceNotes Class
 * Contains the methods which will process the request and response
 *
 * @author  Srikanth Kuruva
 * @version  2012-02-13
 */
 //Generated by wsdl2apex

public class ServiceNotesWS {
    public class GetServiceNoteDetailResponse_element {
        public ServiceNotesWSObjects.ServiceNoteItem ServiceNoteItem;
        private String[] ServiceNoteItem_type_info = new String[]{'ServiceNoteItem','http://west.thomson.com/crm/rocketxsd/3.0/servicenote','ServiceNoteItem','0','1','false'};
        private String[] apex_schema_type_info = new String[]{'http://west.thomson.com/crm/rocketservices/3.0/servicenote','true','false'};
        private String[] field_order_type_info = new String[]{'ServiceNoteItem'};
    }

    public class ServiceNote_v3_0Port {
        public String endpoint_x = 'http://crmrocketdev.int.westgroup.com/rocketdeploy/services/ServiceNote_v3_0Port';
        public Map<String,String> inputHttpHeaders_x;
        public Map<String,String> outputHttpHeaders_x;
        public String clientCertName_x;
        public String clientCert_x;
        public String clientCertPasswd_x;
        public Integer timeout_x;
        private String[] ns_map_type_info = new String[]{'http://west.thomson.com/crm/rocketservices/3.0/servicenote', 'ServiceNotesWS', 'http://west.thomson.com/crm/rocketxsd/3.0/servicenote', 'ServiceNotesWSObjects'};
        public ServiceNotesWSObjects.ServiceNoteItem[] GetServiceNoteItems(String SystemId,Decimal[] AcctSapId,Date BegDt,Date EndDt) {
            ServiceNotesWS.GetServiceNoteItems_element request_x = new ServiceNotesWS.GetServiceNoteItems_element();
            ServiceNotesWS.GetServiceNoteItemsResponse_element response_x = new ServiceNotesWS.GetServiceNoteItemsResponse_element();
            request_x.SystemId = SystemId;
            request_x.AcctSapId = AcctSapId;
            request_x.BegDt = BegDt;
            request_x.EndDt = EndDt;
            Map<String, ServiceNotesWS.GetServiceNoteItemsResponse_element> response_map_x = new Map<String, ServiceNotesWS.GetServiceNoteItemsResponse_element>();
            response_map_x.put('response_x', response_x);
            if(!Test.isRunningTest())
            {
            WebServiceCallout.invoke(
              this,
              request_x,
              response_map_x,
              new String[]{endpoint_x,
              'GetServiceNoteItems',
              'http://west.thomson.com/crm/rocketservices/3.0/servicenote',
              'GetServiceNoteItems',
              'http://west.thomson.com/crm/rocketservices/3.0/servicenote',
              'GetServiceNoteItemsResponse',
              'ServiceNotesWS.GetServiceNoteItemsResponse_element'}
            ); 
            }            
            response_x = response_map_x.get('response_x');
            System.debug('response_x:'+response_x);
            return response_x.ServiceNoteItem;
        }
        public ServiceNotesWSObjects.ServiceNoteItem GetServiceNoteDetail(String SystemId,String ServiceNoteId) {
            ServiceNotesWS.GetServiceNoteDetail_element request_x = new ServiceNotesWS.GetServiceNoteDetail_element();
            ServiceNotesWS.GetServiceNoteDetailResponse_element response_x = new ServiceNotesWS.GetServiceNoteDetailResponse_element();
            request_x.SystemId = SystemId;
            request_x.ServiceNoteId = ServiceNoteId;
            Map<String, ServiceNotesWS.GetServiceNoteDetailResponse_element> response_map_x = new Map<String, ServiceNotesWS.GetServiceNoteDetailResponse_element>();
            response_map_x.put('response_x', response_x);
            if(!Test.isRunningTest())
            {
            WebServiceCallout.invoke(
              this,
              request_x,
              response_map_x,
              new String[]{endpoint_x,
              'GetServiceNoteDetail',
              'http://west.thomson.com/crm/rocketservices/3.0/servicenote',
              'GetServiceNoteDetail',
              'http://west.thomson.com/crm/rocketservices/3.0/servicenote',
              'GetServiceNoteDetailResponse',
              'ServiceNotesWS.GetServiceNoteDetailResponse_element'}
            );
            }            
            response_x = response_map_x.get('response_x');
            System.debug('response_x:'+response_x);
            return response_x.ServiceNoteItem;
        }
    }

    public class ServiceNote_v4_0ESI_Implementation{


        public Map<String,String> inputHttpHeaders_x;
        public Map<String,String> outputHttpHeaders_x;
        public String clientCertName_x;
        public String clientCert_x;
        public String clientCertPasswd_x;
        public String applicationID = 'ESCU';
        public Integer timeout_x;
        private String[] ns_map_type_info = new String[]{'http://west.thomson.com/crm/rocketservices/3.0/servicenote', 'ServiceNotesWS', 'http://west.thomson.com/crm/rocketxsd/3.0/servicenote', 'ServiceNotesWSObjects'};

        private String orgId = UserInfo.getOrganizationId();

        //private String endpoint_x_ServiceNotesDetail = getServiceNoteDetailEndpoint(orgId);
        //private String endpoint_x_ServiceNotesList = getServiceNoteListEndpoint(orgId);

        //getServiceNoteList
        public ServiceNotesWSObjects.ServiceNoteItem[] GetServiceNoteItems(String SystemId,Decimal[] AcctSapId,Date BegDt,Date EndDt) {
            webServiceClass webRequest = new webServiceClass('USL_ServiceNoteServicesESI');
            ServiceNotesWS.GetServiceNoteItems_element request_x = new ServiceNotesWS.GetServiceNoteItems_element();
            ServiceNotesWS.GetServiceNoteItemsResponse_element response_x = new ServiceNotesWS.GetServiceNoteItemsResponse_element();
            request_x.SystemId = SystemId;
            request_x.AcctSapId = AcctSapId;
            String sapList = '';
            for(Decimal d : AcctSapId){
                if(d != 0 ){
                    sapList += String.valueOf(d) + '", "';
                }

            }
            sapList = sapList.substring(0, sapList.length()-4);
            String BegDate = getDateString(begDt);
            String EndDate = getDateString(endDt);
            Map<String, ServiceNotesWS.GetServiceNoteItemsResponse_element> response_map_x = new Map<String, ServiceNotesWS.GetServiceNoteItemsResponse_element>();
            List<ServiceNotesWSObjects.ServiceNoteItem> serviceNoteItems = new List<ServiceNotesWSObjects.ServiceNoteItem>();
            response_map_x.put('response_x', response_x);
            
            //Sample ServiceNoteItemRequest
            String a = 'a';
            String JSONReq = '{"esiHeader": {' +
                    '"applicationId": "' + applicationID + '",' +
                    '"messageId": "UUID",' +
                    '"companyId": "WEST"' +//Needs to be a custom setting, companyID, UUID
                    '},' +
                    '"accountNumber": ["' +
                    sapList +
                    '"],' +
                    '"startdate": ' + BegDate + ',' +
                    '"enddate": ' + EndDate +
                    '}';
            System.debug('JSON RequestString:' + JSONReq);

            HttpRequest req = new HttpRequest();
            HttpResponse res = new HttpResponse();
            Http http = new Http();

            req.setMethod('POST');
            req.setHeader('Content-Type', 'application/json');
            req.setHeader('Authorization', webRequest.getAuthorizationString());
            req.setEndpoint(webRequest.endpointURL);
            req.setBody(JSONReq);
            req.setTimeout(120000);
            System.debug('############# TIMEOUT:' + this.timeout_x);

            System.debug('############# REQUEST:' + req);
            System.debug('############# Authorization:' + webRequest.getAuthorizationString());
            
          
            try {
                if (!Test.isRunningTest()) {
                    res = http.send(req);
                    }
                else{
                    res.setHeader('Content-Type', 'application/json');
                    res.setBody(getSampleJson());
                    res.setStatusCode(200);
                   
                }
                //res =  http.send(req);
                System.debug('Response Body:' + res.getBody());

                JSONParser parser = JSON.createParser(res.getBody());
                String statusCode = getStatusCode(parser);
                List<ServiceNotesWSObjects.serviceNoteItem> noteItems = getNoteItemsFromJson(parser, statusCode);
                return noteItems;
            }
            catch (System.CalloutException e) {
                //TODO Create a Exception Object Record
                System.debug('Callout error: ' + e);
                System.debug(res.toString());
                return null;
            }

            return serviceNoteItems;

        }

        public ServiceNotesWSObjects.ServiceNoteItem GetServiceNoteDetail(String SystemId,String ServiceNoteId) {
            webServiceClass webRequest = new webServiceClass('USL_ServiceNoteServicesdetailESI');
            ServiceNotesWS.GetServiceNoteItems_element request_x = new ServiceNotesWS.GetServiceNoteItems_element();
            ServiceNotesWS.GetServiceNoteItemsResponse_element response_x = new ServiceNotesWS.GetServiceNoteItemsResponse_element();
            request_x.SystemId = SystemId;
            //request_x.AcctSapId = AcctSapId;
            //String BegDate = getDateString(begDt);
            //String EndDate = getDateString(endDt);
            Map<String, ServiceNotesWS.GetServiceNoteItemsResponse_element> response_map_x = new Map<String, ServiceNotesWS.GetServiceNoteItemsResponse_element>();
            ServiceNotesWSObjects.ServiceNoteItem serviceNoteItem = new ServiceNotesWSObjects.ServiceNoteItem();
            response_map_x.put('response_x', response_x);
            
                //Sample ServiceNoteItemRequest
                String a = 'a';
                String JSONReq = '{"esiHeader": {' +
                        '"applicationId": "' + applicationID + '",' +
                        '"messageId": "UUID",' +
                        '"companyId": "WEST"' +
                        '},' +
                        '"NoteId": "' + ServiceNoteId + '"' +
                        '}';
                System.debug('JSON RequestString:' + JSONReq);

                HttpRequest req = new HttpRequest();
                HttpResponse res = new HttpResponse();
                Http http = new Http();

                req.setMethod('POST');
                req.setHeader('Content-Type', 'application/json');
                req.setHeader('Authorization', webRequest.getAuthorizationString());
                req.setEndpoint(webRequest.endpointURL);
                req.setBody(JSONReq);

                System.debug('############# REQUEST:' + req);
            
                try {
                    if (!Test.isRunningTest()) {
                        res = http.send(req);
                    }
                    else{
                        res.setHeader('Content-Type', 'application/json');
                        res.setBody(getSampleJson());
                        res.setStatusCode(200);
                    }
                    System.debug('Response Body:' + res.getBody());

                    JSONParser parser = JSON.createParser(res.getBody());
                    String statusCode = getStatusCode(parser);
                    List<ServiceNotesWSObjects.serviceNoteItem> noteItems = getNoteItemsFromJson(parser, statusCode);


                    if(noteItems == null){
                        return null;
                    }
                    else{
                        return noteItems.get(0);
                    }

                } catch (System.CalloutException e) {
                    System.debug('Callout error: ' + e);
                    System.debug(res.toString());
                    throw e;
                    //return null;
                }

                //return null;
            }



        private String getDateString(Date d){

            String year = String.valueOf(d.year());
            String month;
            String day;

            if(Integer.valueOf(d.month()) < 10){
                month = '0' + String.valueOf(d.month());
            }else{
                month= String.valueOf(d.month());
            }
            if(Integer.valueOf(d.day()) < 10){
                day = '0' + String.valueOf(d.day());
            }else{
                day = String.valueOf(d.day());
            }

            return '"' + year + '-' + month + '-' + day + '"';
        }

        public List<ServiceNotesWSObjects.serviceNoteItem> getNoteItemsFromJson(JSONParser parser, String statusCode) {

            if (statusCode != '200') {
                //TODO Create Exception Opject
                String errorMsg = parseErrorMessage(parser);
                ApexPages.addMessages(new AppUtil.AppException(errorMsg));
                //ServiceNotesWSObjects.ServiceNoteItem serviceNoteItem = new ServiceNotesWSObjects.ServiceNoteItem();
                //CalloutException commonCalloutException = new CalloutException();
                //commonCalloutException.setMessage(errorMsg);
                throw new ESC_HandlerCustomException(errorMsg);
                //return null;
            }


            if (statusCode == '200') {
                List<ServiceNotesWSObjects.serviceNoteItem> noteItems = new List<ServiceNotesWSObjects.serviceNoteItem>();
                //ServiceNotesWSObjects.noteItems[] noteItems = new ServiceNotesWSObjects.noteItems[]();

                while (parser.nextToken() != null) {
                    //if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && (parser.getText() != 'changedOnDate')) {
                    System.debug('################Status Code was 200! yay!');

                    if (parser.getCurrentToken() == JSONToken.START_OBJECT) {
                        System.debug('Start of object found!');
                        noteItems.add(parseNoteItem(parser));
                    }
                }

                return noteItems;

            }

            return null;
        }

        public ServiceNotesWSObjects.ServiceNoteItem parseNoteItem(JSONParser parser){

            ServiceNotesWSObjects.ServiceNoteItem serviceNoteItem = new ServiceNotesWSObjects.ServiceNoteItem();
            List<ServiceNotesWSObjects.ActivityCodeItem> ACIList = new List<ServiceNotesWSObjects.ActivityCodeItem>();

            while (parser.getCurrentToken() != JSONToken.END_OBJECT && parser.nextToken()!= null) {

                System.debug('########################## Hit line 160.');
                System.debug('&&&&&&&&&&&&&&&&&&&&&&&&&& Token:' + parser.getCurrentName());

                if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && (parser.getText() == 'noteId')) {
                    parser.nextToken();
                    serviceNoteItem.ServiceNoteId = parser.getText();
                }
                if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && (parser.getText() == 'accountNumber')) {
                    parser.nextToken();
                    serviceNoteItem.AcctSapId = Decimal.valueOf(parser.getText());
                }
                if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && (parser.getText() == 'statusId')) {
                    parser.nextToken();
                    serviceNoteItem.StatusId = parser.getText();
                }
                if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && (parser.getText() == 'shortDescription')) {
                    parser.nextToken();
                    serviceNoteItem.ShortDesc = parser.getText();
                }
                if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && (parser.getText() == 'longDescription')) {
                    parser.nextToken();
                    serviceNoteItem.LongDesc = parser.getText();
                }
                if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && (parser.getText() == 'statusDescription')) {
                    parser.nextToken();
                    serviceNoteItem.StatusDesc = parser.getText();
                }
                if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && (parser.getText() == 'departmentId')) {
                    parser.nextToken();
                    serviceNoteItem.DepartmentId = parser.getText();
                }
                if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && (parser.getText() == 'departmentDescription')) {
                    parser.nextToken();
                    serviceNoteItem.DepartmentDesc = parser.getText();
                }
                if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && (parser.getText() == 'requester')) {
                    parser.nextToken();
                    serviceNoteItem.Requester = parser.getText();
                }
                if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && (parser.getText() == 'contactMethod')) {
                    parser.nextToken();
                    serviceNoteItem.ContactMethod = parser.getText();
                }
                if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && (parser.getText() == 'priorityId')) {
                    parser.nextToken();
                    serviceNoteItem.PriorityId = parser.getText();
                }
                if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && (parser.getText() == 'priorityDescription')) {
                    parser.nextToken();
                    serviceNoteItem.PriorityDesc = parser.getText();
                }
                //if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && (parser.getText() == 'activityCodeItemList')) {
                //    parser.nextToken();
                    //serviceNoteItem.ActivityCodeItemList = parser.getText();
                //}
                if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && (parser.getText() == 'createTime')) {
                    parser.nextToken();
                    String timeString = parser.getText();
                    System.debug('line no 371 Service note Ws timeString '+timeString); 
                    Integer year = Integer.valueOf(timeString.substring(0,4));
                    Integer month = Integer.valueOf(timeString.subString(5,7));
                    Integer day = Integer.valueOf(timeString.subString(8,10));
                    Integer hour = Integer.valueOf(timeString.subString(11,13));
                    Integer minute = Integer.valueOf(timeString.subString(14,16));
                    Integer second = Integer.valueOf(timeString.subString(17,19));
                    //2017-08-31T07:45:20
                    //2017-08-31T07:45:20Z
                    //YYYY-MM-DDThh:mm:ss.sssZ.
                    //System.debug('line no 381 Service note Ws hour '+hour);
                    //System.debug('line no 382 Service note Ws minute '+minute);
                    //System.debug('line no 383 Service note Ws second '+second);
                    //string stringDate = year + '-' + month + '-' + day + ' ' + hour + ':' + minute +  ':' + second;
					//System.debug('line no 385 stringDate  '+stringDate);
                    //System.debug('line no 386 DateTime.valueOf(stringDate)'+DateTime.valueOf(stringDate));
                    //System.debug('line no 387 Service note Ws DateTimenewInstance '+ DateTime.newInstance(year, month, day,hour,minute,second));
                    //serviceNoteItem.CreateTS = DateTime.newInstance(year, month, day);
                    serviceNoteItem.CreateTS =DateTime.newInstance(year, month, day,hour,minute,second);                   
                    System.debug('line no 390 serviceNoteItem.CreateTS '+serviceNoteItem.CreateTS);
                }
                if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && (parser.getText() == 'changedBy')) {
                    parser.nextToken();
                    serviceNoteItem.changedBy = parser.getText();
                }
                if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && (parser.getText() == 'changedOnDate')) {
                    parser.nextToken();
                    String changedOn = parser.getText();
                    if(changedOn == '0000-00-00'){
                        changedOn = '1970-01-01';
                    }
                    Integer year = Integer.valueOf(changedOn.substring(0,4));
                    Integer month = Integer.valueOf(changedOn.subString(5,7));
                    Integer day = Integer.valueOf(changedOn.subString(8,10));
                    serviceNoteItem.changedOnDate = Date.newInstance(year,month,day);
                }
                if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && (parser.getText() == 'partnerType')) {
                    parser.nextToken();
                    serviceNoteItem.partnerType = parser.getText();
                }

                if(parser.getCurrentName() == 'activityCodeItemList'){
                    ACIList.add(parseActivityCodeItemList(parser));
                }

                // Read entire invoice object, including its array of line items.
                //ServiceNotesWS.GetServiceNoteItemsResponse_elementESI element = (ServiceNotesWS.GetServiceNoteItemsResponse_elementESI) parser.readValueAs(ServiceNotesWS.GetServiceNoteItemsResponse_elementESI.class);
                // For debugging purposes, serialize again to verify what was parsed.
                //String s = JSON.serialize(element);
                //system.debug('Serialized invoice: ' + s);
                // Skip the child start array and start object markers.
                //parser.skipChildren();
            }
            System.debug('Created Object NoteItem from JSON:' + serviceNoteItem);
            serviceNoteItem.ActivityCodeItemList = ACIList;
            return serviceNoteItem;
        }

        public String parseErrorMessage(JSONParser parser){

            String statusDescription = 'Status Description: ';
            String statusDetailMessage = 'Status Detail Message: ';

            while (parser.getCurrentToken() != JSONToken.END_OBJECT && parser.nextToken()!= null) {

                if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && (parser.getText() == 'statusDescription')) {
                    parser.nextToken();
                    statusDescription += parser.getText();
                }
                if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && (parser.getText() == ' statusDetailMessage')) {
                    parser.nextToken();
                    statusDetailMessage += parser.getText();
                }

            }

            return statusDescription + '\n' +  statusDetailMessage;

        }

        public ServiceNotesWSObjects.ActivityCodeItem parseActivityCodeItemList(JSONParser parser){
            ServiceNotesWSObjects.ActivityCodeItem aci = new ServiceNotesWSObjects.ActivityCodeItem();

            while (parser.getCurrentToken() != JSONToken.END_OBJECT && parser.nextToken()!= null) {
                if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && (parser.getText() == 'activityCodeId')) {
                    parser.nextToken();
                    aci.ActivityCodeId = parser.getText();
                }
                if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && (parser.getText() == 'activityCodeDesc')) {
                    parser.nextToken();
                    aci.ActivityCodeDesc = parser.getText();
                }

            }
            parser.nextToken();
            return aci;
        }

        public String getStatusCode(JSONParser parser){
            while (parser.nextToken() != null) {
                if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && (parser.getText() == 'status')) {
                    parser.nextToken();
                    if(parser.getText() == 'Unauthorized'){
                        return '401';
                    }
                }
                if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && (parser.getText() == 'statusCode')) {
                    parser.nextToken();
                    return parser.getText();
                }
            }
            return null;
        }
        
        public String getSampleJson(){
            String sample =
            
            '{'+
            '   "processStatus": {'+
            '       "statusCode": "200",'+
            '       "statusDescription": "Success",'+
            '       "statusDetailMessage": "Success"'+
            '   },'+
            '   "NoteItemDetails": ['+
            '       {'+
            '           "noteItems": ['+
            '               {'+
            '                   "noteId": "000348592464",'+
            '                   "accountNumber": "1000550803",'+
            '                   "statusId": "NOCO",'+
            '                   "statusDescription": "Notification completed",'+
            '                   "departmentId": "1000550803",'+
            '                   "departmentDescription": "DORSEY & WHITNEY LLP",'+
            '                   "requester": "SARAH WINTER",'+
            '                   "contactMethod": "MAIL",'+
            '                   "priorityId": "2",'+
            '                   "priorityDescription": "Manage Account",'+
            '                   "activityCodeItemList": ['+
            '                       {'+
            '                           "activityCodeId": "REXP",'+
            '                           "activityCodeDesc": "Confirmation of Return"'+
            '                       }'+
            '                   ],'+
            '                   "shortDescription": "Return Explanation",'+
            '                   "longDescription": null,'+
            '                   "createTime": "2018-01-26T16:11:28",'+
            '                   "changedBy": "CSSWEB",'+
            '                   "changedOnDate": "2018-01-26",'+
            '                   "partnerType": "AG"'+
            '               }'+
            '           ]'+
            '       },'+
            '       {'+
            '           "noteItems": ['+
            '               {'+
            '                   "noteId": "000348590625",'+
            '                   "accountNumber": "1000550803",'+
            '                   "statusId": "NOCO",'+
            '                   "statusDescription": "Notification completed",'+
            '                   "departmentId": "1000550803",'+
            '                   "departmentDescription": "DORSEY & WHITNEY LLP",'+
            '                   "requester": "SARAH WINTER",'+
            '                   "contactMethod": "EMAIL",'+
            '                   "priorityId": "1",'+
            '                   "priorityDescription": "General Inquiry",'+
            '                   "activityCodeItemList": ['+
            '                       {'+
            '                           "activityCodeId": "SSXP",'+
            '                           "activityCodeDesc": "FJI"'+
            '                       }'+
            '                   ],'+
            '                   "shortDescription": "Subscription Explanation",'+
            '                   "longDescription": null,'+
            '                   "createTime": "2018-01-26T13:32:55",'+
            '                   "changedBy": "CSSWEB",'+
            '                   "changedOnDate": "2018-01-26",'+
            '                   "partnerType": "AG"'+
            '               }'+
            '           ]'+
            '       }'+
            '   ]'+
            '}';
            return sample; 
        }

    }

    public class GetServiceNoteItems_element {
        public String SystemId;
        public Decimal[] AcctSapId;
        public Date BegDt;
        public Date EndDt;
        private String[] SystemId_type_info = new String[]{'SystemId','http://www.w3.org/2001/XMLSchema','string','1','1','false'};
        private String[] AcctSapId_type_info = new String[]{'AcctSapId','http://www.w3.org/2001/XMLSchema','decimal','0','-1','false'};
        private String[] BegDt_type_info = new String[]{'BegDt','http://www.w3.org/2001/XMLSchema','date','1','1','false'};
        private String[] EndDt_type_info = new String[]{'EndDt','http://www.w3.org/2001/XMLSchema','date','1','1','false'};
        private String[] apex_schema_type_info = new String[]{'http://west.thomson.com/crm/rocketservices/3.0/servicenote','true','false'};
        private String[] field_order_type_info = new String[]{'SystemId','AcctSapId','BegDt','EndDt'};
    }
    public class GetServiceNoteItemsResponse_element {
        public ServiceNotesWSObjects.ServiceNoteItem[] ServiceNoteItem;
        private String[] ServiceNoteItem_type_info = new String[]{'ServiceNoteItem','http://west.thomson.com/crm/rocketxsd/3.0/servicenote','ServiceNoteItem','0','-1','false'};
        private String[] apex_schema_type_info = new String[]{'http://west.thomson.com/crm/rocketservices/3.0/servicenote','true','false'};
        private String[] field_order_type_info = new String[]{'ServiceNoteItem'};
    }
    public class GetServiceNoteItemsResponse_elementESI {
        public ServiceNotesWSObjects.NoteItems[] noteItems;
        private String[] ServiceNoteItem_type_info = new String[]{'ServiceNoteItem','http://west.thomson.com/crm/rocketxsd/3.0/servicenote','ServiceNoteItem','0','-1','false'};
        private String[] apex_schema_type_info = new String[]{'http://west.thomson.com/crm/rocketservices/3.0/servicenote','true','false'};
        private String[] field_order_type_info = new String[]{'ServiceNoteItem'};
    }
    public class GetServiceNoteDetail_element {
        public String SystemId;
        public String ServiceNoteId;
        private String[] SystemId_type_info = new String[]{'SystemId','http://www.w3.org/2001/XMLSchema','string','1','1','false'};
        private String[] ServiceNoteId_type_info = new String[]{'ServiceNoteId','http://www.w3.org/2001/XMLSchema','string','1','1','false'};
        private String[] apex_schema_type_info = new String[]{'http://west.thomson.com/crm/rocketservices/3.0/servicenote','true','false'};
        private String[] field_order_type_info = new String[]{'SystemId','ServiceNoteId'};
    }


}