//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

Global class CaseWrapper {

    public CaseWrapper(){

    }

    public class Account {
        public Account(){

        }

        public Attributes attributes {get;set;} 
        public String Id {get;set;} 
        public String Name {get;set;} 
        public String SAPAccountNumber {get;set;} 

        public Account(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'attributes') {
                            attributes = new Attributes(parser);
                        } else if (text == 'Id') {
                            Id = parser.getText();
                        } else if (text == 'Name') {
                            Name = parser.getText();
                        } else if (text == 'SAPAccountNumber') {
                            SAPAccountNumber = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Account consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    
    public class CreatedBy {

        public CreatedBy(){

        }

        public Attributes attributes {get;set;} 
        public String Id {get;set;} 
        public String Name {get;set;} 

        public CreatedBy(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'attributes') {
                            attributes = new Attributes(parser);
                        } else if (text == 'Id') {
                            Id = parser.getText();
                        } else if (text == 'Name') {
                            Name = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'CreatedBy consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Records_Y {

        public Records_Y(){

        }

        public Attributes attributes {get;set;} 
        //Need to changes case
        public String CaseId {get;set;} 
        public String Id {get;set;} 
        public String Name {get;set;} 
        public String Agents_Feed {get;set;} 
        public String Customer_Feed {get;set;} 
        public String List_Of_Attachment_Ids {get;set;} 
        public String User_Name {get;set;} 
        public String Agent_Name {get;set;} 
        public String LastModifiedDate {get;set;} 
        public String CreatedDate {get;set;} 

        public Records_Y(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'attributes') {
                            attributes = new Attributes(parser);
                        } else if (text == 'CaseId') {
                            CaseId = parser.getText();
                        } else if (text == 'Id') {
                            Id = parser.getText();
                        } else if (text == 'Name') {
                            Name = parser.getText();
                        } else if (text == 'Agents_Feed') {
                            Agents_Feed = parser.getText();
                        } else if (text == 'Customer_Feed') {
                            Customer_Feed = parser.getText();
                        } else if (text == 'List_Of_Attachment_Ids') {
                            List_Of_Attachment_Ids = parser.getText();
                        } else if (text == 'User_Name') {
                            User_Name = parser.getText();
                        } else if (text == 'Agent_Name') {
                            Agent_Name = parser.getText();
                        } else if (text == 'LastModifiedDate') {
                            LastModifiedDate = parser.getText();
                        } else if (text == 'CreatedDate') {
                            CreatedDate = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Records_Y consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public Attributes attributes {get;set;} 
    public String Id {get;set;} 
    public String ContactEmail {get;set;} 
    public String CaseNumber {get;set;} 
    public String CreatedDate {get;set;} 
    public String ClosedDate {get;set;} 
    public String LastModifiedDate {get;set;} 
    public String Due_DateTime {get;set;} 
    public String Follow_Up_Date {get;set;}     
    public String LastModifiedById {get;set;} 
    public String Subject {get;set;} 
    public String ESC_Customer_Symptom {get;set;} 
    public String Product {get;set;} 
    public String ContactId {get;set;} 
    public String ContactPhone{get;set;}
    public String ContactMobile{get;set;}
    public String ESC_Diagnosis_Summary {get;set;} 
    public String AccountId {get;set;} 
    public String Description {get;set;} 
    public String OwnerId {get;set;} 
    public String ESC_Resolution_Comment {get;set;} 
    public String ESC_Cause {get;set;} 
    public String ESC_Resolution_Code {get;set;} 
    public String Status {get;set;} 
    public String QueryType {get;set;} 
    public String CategoryType {get;set;} 
    public String Reason {get;set;} 
    public String Priority {get;set;} 
    public String ESC_Impact {get;set;} 
    public Attachments Attachments {get;set;} 
    public Histories Histories {get;set;} 
    public Case_Feed Case_Feed {get;set;} 
    public CreatedBy LastModifiedBy {get;set;} 
    public CreatedBy Contact {get;set;} 
    public Account Account {get;set;} 
    public CreatedBy Owner {get;set;} 

    public CaseWrapper(JSONParser parser) {
        while (parser.nextToken() != System.JSONToken.END_OBJECT) {
            if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                String text = parser.getText();
                if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                    if (text == 'attributes') {
                        attributes = new Attributes(parser);
                    } else if (text == 'Id') {
                        Id = parser.getText();
                    } else if (text == 'ContactEmail') {
                        ContactEmail = parser.getText();
                    }else if (text == 'ContactPhone') {
                        ContactPhone = parser.getText();
                    } else if (text == 'ContactMobile') {
                        ContactMobile = parser.getText();
                    } else if (text == 'CaseNumber') {
                        CaseNumber = parser.getText();
                    } else if (text == 'CreatedDate') {
                        CreatedDate = parser.getText();
                    }else if (text == 'ClosedDate') {
                        ClosedDate = parser.getText();
                    } else if (text == 'LastModifiedDate') {
                        LastModifiedDate = parser.getText();
                    }else if (text == 'Follow_Up_Date') {
                        Follow_Up_Date = parser.getText();
                    }else if (text == 'Due_DateTime') {
                        Due_DateTime = parser.getText();
                    } else if (text == 'LastModifiedById') {
                        LastModifiedById = parser.getText();
                    } else if (text == 'Subject') {
                        Subject = parser.getText();
                    } else if (text == 'ESC_Customer_Symptom') {
                        ESC_Customer_Symptom = parser.getText();
                    } else if (text == 'Product') {
                        Product = parser.getText();
                    } else if (text == 'ContactId') {
                        ContactId = parser.getText();
                    } else if (text == 'ESC_Diagnosis_Summary') {
                        ESC_Diagnosis_Summary = parser.getText();
                    } else if (text == 'AccountId') {
                        AccountId = parser.getText();
                    } else if (text == 'Description') {
                        Description = parser.getText();
                    } else if (text == 'OwnerId') {
                        OwnerId = parser.getText();
                    } else if (text == 'ESC_Resolution_Comment') {
                        ESC_Resolution_Comment = parser.getText();
                    } else if (text == 'ESC_Cause') {
                        ESC_Cause = parser.getText();
                    } else if (text == 'ESC_Resolution_Code') {
                        ESC_Resolution_Code = parser.getText();
                    } else if (text == 'Status') {
                        Status = parser.getText();
                    } else if (text == 'QueryType') {
                        QueryType = parser.getText();
                    } else if (text == 'CategoryType') {
                        CategoryType = parser.getText();
                    } else if (text == 'Reason') {
                        Reason = parser.getText();
                    } else if (text == 'Priority') {
                        Priority = parser.getText();
                    } else if (text == 'ESC_Impact') {
                        ESC_Impact = parser.getText();
                    } else if (text == 'Attachments') {
                        Attachments = new Attachments(parser);
                    } else if (text == 'Histories') {
                        Histories = new Histories(parser);
                    } else if (text == 'Case_Feed') {
                        Case_Feed = new Case_Feed(parser);
                    } else if (text == 'LastModifiedBy') {
                        LastModifiedBy = new CreatedBy(parser);
                    } else if (text == 'Contact') {
                        Contact = new CreatedBy(parser);
                    } else if (text == 'Account') {
                        Account = new Account(parser);
                    } else if (text == 'Owner') {
                        Owner = new CreatedBy(parser);
                    } else {
                        System.debug(LoggingLevel.WARN, 'CaseWrapper consuming unrecognized property: '+text);
                        consumeObject(parser);
                    }
                }
            }
        }
    }
    
    public class Records_Z {
        public Records_Z(){

        }

        public Attributes attributes {get;set;} 
        public String CaseId {get;set;} 
        public String Id {get;set;} 
        public String Field {get;set;} 
        public String NewValue {get;set;} 
        public String OldValue {get;set;} 
        public String CreatedDate {get;set;} 
        public String CreatedById {get;set;} 
        public CreatedBy CreatedBy {get;set;} 

        public Records_Z(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'attributes') {
                            attributes = new Attributes(parser);
                        } else if (text == 'CaseId') {
                            CaseId = parser.getText();
                        } else if (text == 'Id') {
                            Id = parser.getText();
                        } else if (text == 'Field') {
                            Field = parser.getText();
                        } else if (text == 'NewValue') {
                            NewValue = parser.getText();
                        } else if (text == 'OldValue') {
                            OldValue = parser.getText();
                        } else if (text == 'CreatedDate') {
                            CreatedDate = parser.getText();
                        } else if (text == 'CreatedById') {
                            CreatedById = parser.getText();
                        } else if (text == 'CreatedBy') {
                            CreatedBy = new CreatedBy(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Records_Z consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Attributes{

        public Attributes(){

        }

        public String type_Z {get;set;} // in json: type
        public String url {get;set;} 

        public Attributes(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'type') {
                            type_Z = parser.getText();
                        } else if (text == 'url') {
                            url = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Attributes consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Histories {

        public Histories(){

        }

        public Integer totalSize {get;set;} 
        public Boolean done {get;set;} 
        public List<Records_Z> records {get;set;} 

        public Histories(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'totalSize') {
                            totalSize = parser.getIntegerValue();
                        } else if (text == 'done') {
                            done = parser.getBooleanValue();
                        } else if (text == 'records') {
                            records = arrayOfRecords_Z(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Histories consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Case_Feed {

        public Case_Feed(){

        }

        public Integer totalSize {get;set;} 
        public Boolean done {get;set;} 
        public List<Records_Y> records {get;set;} 

        public Case_Feed(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'totalSize') {
                            totalSize = parser.getIntegerValue();
                        } else if (text == 'done') {
                            done = parser.getBooleanValue();
                        } else if (text == 'records') {
                            records = arrayOfRecords_Y(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Case_Feed consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Records {

        public Records(){

        }

        public Attributes attributes {get;set;} 
        public String ParentId {get;set;} 
        public String Id {get;set;} 
        public String Name {get;set;} 
        public String Description {get;set;} 

        public Records(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'attributes') {
                            attributes = new Attributes(parser);
                        } else if (text == 'ParentId') {
                            ParentId = parser.getText();
                        } else if (text == 'Id') {
                            Id = parser.getText();
                        } else if (text == 'Name') {
                            Name = parser.getText();
                        } else if (text == 'Description') {
                            Description = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Records consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Attachments {

        public Attachments(){

        }
        
        public Integer totalSize {get;set;} 
        public Boolean done {get;set;} 
        public List<Records> records {get;set;} 

        public Attachments(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'totalSize') {
                            totalSize = parser.getIntegerValue();
                        } else if (text == 'done') {
                            done = parser.getBooleanValue();
                        } else if (text == 'records') {
                            records = arrayOfRecords(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Attachments consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    
    public static List<CaseWrapper> parse(String json) {
        System.JSONParser parser = System.JSON.createParser(json);
        return arrayOfCaseWrapper(parser);
    }
    
    public static void consumeObject(System.JSONParser parser) {
        Integer depth = 0;
        do {
            System.JSONToken curr = parser.getCurrentToken();
            if (curr == System.JSONToken.START_OBJECT || 
                curr == System.JSONToken.START_ARRAY) {
                depth++;
            } else if (curr == System.JSONToken.END_OBJECT ||
                curr == System.JSONToken.END_ARRAY) {
                depth--;
            }
        } while (depth > 0 && parser.nextToken() != null);
    }
    


    private static List<CaseWrapper> arrayOfCaseWrapper(System.JSONParser p) {
        List<CaseWrapper> res = new List<CaseWrapper>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new CaseWrapper(p));
        }
        return res;
    }


    private static List<Records_Z> arrayOfRecords_Z(System.JSONParser p) {
        List<Records_Z> res = new List<Records_Z>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Records_Z(p));
        }
        return res;
    }









    private static List<Records> arrayOfRecords(System.JSONParser p) {
        List<Records> res = new List<Records>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Records(p));
        }
        return res;
    }






    private static List<Records_Y> arrayOfRecords_Y(System.JSONParser p) {
        List<Records_Y> res = new List<Records_Y>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Records_Y(p));
        }
        return res;
    }



}