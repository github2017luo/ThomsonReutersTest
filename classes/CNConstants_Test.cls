/**
* {Purpose} â€“ Test class for CNConstants
*
* @author	Glen Cunningham
* @version	2015-12-2
*/

/**
* CHANGE HISTORY
* ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
* Date			Name					Description
*
* ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
*/
@isTest
private class CNConstants_Test {

    static testMethod void myUnitTest() {
        //Custom setting keys
		system.assertEquals(CNConstants.APP_SETTING_KEY , 'CNAPP');
		
		//Debug constants
		system.assertEquals(CNConstants.DEBUG_MODE , true);
		  
		//URL merge fields related constants.
		system.assertEquals(CNConstants.MERGE_FIELD_ID, '{ID}');
		system.assertEquals(CNConstants.MERGE_FIELD_EMAIL , '{EMAIL}');
		system.assertEquals(CNConstants.MERGE_FIELD_CNID , '{CNID}');	
		system.assertEquals(CNConstants.MERGE_FIELD_COMPANY_CNID , '{CompanyCNID}');	
		system.assertEquals(CNConstants.MERGE_FIELD_COMPANY_NAME , '{CompanyName}');	
		system.assertEquals(CNConstants.MERGE_FIELD_COMPANY_DOMAIN , '{CompanyDomain}');	
		system.assertEquals(CNConstants.MERGE_FIELD_FIRST , '{First}');  //index	
		system.assertEquals(CNConstants.MERGE_FIELD_TOP , '{Top}');  //records count or size
		system.assertEquals(CNConstants.MERGE_FIELD_INCLUDE_FIRST , '{IncludeFirst}');
		system.assertEquals(CNConstants.MERGE_FIELD_INCLUDE_TOP , '{IncludeTop}');
		
		//URL parameter names		
		system.assertEquals(CNConstants.URL_PARAM_APP , 'app');
		system.assertEquals(CNConstants.URL_PARAM_AUTHKEY , 'authKey');
		system.assertEquals(CNConstants.URL_PARAM_FORMAT , 'format');
		system.assertEquals(CNConstants.URL_PARAM_JSON , 'json');
		
		//Source type constants
		system.assertEquals(CNConstants.SOURCE_TYPE_ISCALENDAR , 'IsCalendar');
		system.assertEquals(CNConstants.SOURCE_TYPE_ISEMAIL , 'IsEmail');
		system.assertEquals(CNConstants.SOURCE_TYPE_ISADDRESSBOOK , 'IsAddressBook');
		system.assertEquals(CNConstants.SOURCE_TYPE_ISPHONE , 'IsPhone');
		system.assertEquals(CNConstants.SOURCE_TYPE_ISCRM , 'IsInterAction');
		system.assertEquals(CNConstants.SOURCE_TYPE_ISBILLING , 'IsTimeAndBilling');
		system.assertEquals(CNConstants.SOURCE_TYPE_ISSIGNATURE , 'IsSignature');
		system.assertEquals(CNConstants.SOURCE_TYPE_ISVISIT , 'IsVisit');
		system.assertEquals(CNConstants.SOURCE_TYPE_ISACCNTMGR , 'IsAccntMgr');
		system.assertEquals(CNConstants.SOURCE_TYPE_ISIARELATIONSHIP , 'IsIAReleationship');
		system.assertEquals(CNConstants.SOURCE_TYPE_ISREFERRAL , 'IsReferral');
		//Relationship type constants
		system.assertEquals(CNConstants.RELATIONSHIP_TYPE_TOCONTACT , 'toContact');
		system.assertEquals(CNConstants.RELATIONSHIP_TYPE_TOCOMPANY , 'toCompany');
		system.assertEquals(CNConstants.RELATIONSHIP_TYPE_TOINDUSTRY , 'toIndustry');
		
		//Page constants
		system.assertEquals(CNConstants.PAGE_SIZE_CAP , 10); //Maximum no of records displayed each time during pagination
		
		//Other constants
		system.assertEquals(CNConstants.EMBEDDED_LIST_SOQL_RECORDS_CAP , 100); //Maximum no of records fetched from custom object for the main embedded list page.
		system.assertEquals(CNConstants.GOTO_LIST_LINK_DISPLAY_POLLER_MAX_ATTEMPTS , 10);
		system.assertEquals(CNConstants.ERROR_EMAIL_SENDER_DISPLAY_NAME , 'ContactNet Integration');
		system.assertEquals(CNConstants.DATA_CLEANUP_JOB_BATCH_SIZE , 50);
		system.assertEquals(CNConstants.DATA_CLEANUP_JOB_NAME , 'CNDataCleanupJob');
		system.assertEquals(CNConstants.SECURITY_TOKEN_LENGTH , 25);
		
		system.assertEquals(CNConstants.EXCEPTION_HEADER_MSG , 'The Business Development Premier application has experienced an unexpected error. ' +
								'Should this message persists, please contact your System Administrator and provide tracking id {TOKEN}');
		system.assertEquals(CNConstants.EXCEPTION_EMAIL_FOOTER_MSG , 'This email was auto generated by Business Development Premier for Salesforce Integration. ' + 
																	'Don\'t reply to this message.');	
			
		//Contact page related APIs
		system.assertEquals(CNConstants.CONTACT_SEARCH_AND_RELATIONSHIP_API , 'contacts?emailAddress=' + CNConstants.MERGE_FIELD_EMAIL + 
							'&includeRelationships=true&top=1&includeTop=' + CNConstants.MERGE_FIELD_INCLUDE_TOP);  //search for a contact using email address & returns the colleagues
		system.assertEquals(CNConstants.CONTACT_RELATIONSHIP_API , 'contacts/' + CNConstants.MERGE_FIELD_CNID + '/relationships?' + 
							'top=' + CNConstants.MERGE_FIELD_TOP + '&first=' + CNConstants.MERGE_FIELD_FIRST);  //fetch relationships for a given contact
	
		//Company page related APIs
		system.assertEquals(CNConstants.COLLEAGUE_RELATIONSHIP_API , 'colleagues/' + CNConstants.MERGE_FIELD_CNID + '/relationships?' + 
							'companyId=' + CNConstants.MERGE_FIELD_COMPANY_CNID + '&top=' + CNConstants.MERGE_FIELD_TOP + '&first=' + CNConstants.MERGE_FIELD_FIRST);  //fetch contacts for a given colleague
		system.assertEquals(CNConstants.COMPANY_COLLEAGUES_API , 'companies?name=' + CNConstants.MERGE_FIELD_COMPANY_NAME + '&domain=' + CNConstants.MERGE_FIELD_COMPANY_DOMAIN + '&IDs=' + CNConstants.MERGE_FIELD_ID +  
							'&includeContacts=false&includeCompanyRelationships=true&includeDeepRelationships=false&top=1&includeTop=' + CNConstants.MERGE_FIELD_INCLUDE_TOP +
							'&includeFirst=' + CNConstants.MERGE_FIELD_INCLUDE_FIRST);  //fetch colleagues for a given company
		system.assertEquals(CNConstants.COMPANY_CONTACTS_API , 'companies?name=' + CNConstants.MERGE_FIELD_COMPANY_NAME + '&domain=' + CNConstants.MERGE_FIELD_COMPANY_DOMAIN + '&IDs=' + CNConstants.MERGE_FIELD_ID +  
							'&includeContacts=true&includeCompanyRelationships=false&includeDeepRelationships=false&top=1&includeTop=' + CNConstants.MERGE_FIELD_INCLUDE_TOP +
							'&includeFirst=' + CNConstants.MERGE_FIELD_INCLUDE_FIRST);  //fetch contacts for a given company
	
	
		//Audit Log constants
		system.assertEquals(CNConstants.AUDIT_COMPONENT_SOURCE_PACKAGE_CONFIG , 'Package Administration');
		system.assertEquals(CNConstants.AUDIT_ACTION_TYPE_VIEW_PACKAGE_CONFIG , 'View Config');
		system.assertEquals(CNConstants.AUDIT_ACTION_TYPE_EDIT_PACKAGE_CONFIG , 'Edit Config');
		system.assertEquals(CNConstants.AUDIT_ACTION_TYPE_CANCEL_PACKAGE_CONFIG , 'Cancelled Edit Config');
		system.assertEquals(CNConstants.AUDIT_ACTION_TYPE_DELETE_PACKAGE_CACHE , 'Delete Cache');
		system.assertEquals(CNConstants.AUDIT_ACTION_TYPE_VIEW_AUDIT_LOG , 'View Audit Log');
		system.assertEquals(CNConstants.AUDIT_ACTION_TYPE_DOWNLOAD_AUDIT_LOG , 'Download Audit Log');
		system.assertEquals(CNConstants.AUDIT_ACTION_TYPE_RESET_SECURITY_TOKEN , 'Reset Security Token');
		
		//Report Name Constants
		system.assertEquals(CNConstants.AUDIT_LOG_REPORT_SANITIZED , 'CN_Audit_Log_sanitized');
		system.assertEquals(CNConstants.AUDIT_LOG_REPORT_NON_SANITIZED , 'CN_Audit_Log_non_sanitized');
	
    }
}