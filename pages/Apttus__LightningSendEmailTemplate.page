<!-- 
Apttus Contract Management
LightningSendEmailTemplate

@2017-2019 Apttus Inc. All rights reserved.

-->
<apex:page standardController="Apttus__APTS_Agreement__c"
           extensions="Apttus.LightningSendEmailWizardController" >
    <head>
        <apex:stylesheet value="{!URLFOR($Resource.Apttus__SLDS080, 'assets/styles/salesforce-lightning-design-system-vf.css')}" />
		<apex:stylesheet value="{!URLFOR($Resource.Apttus__LightningResource, 'css/send-email-select-template.css')}" />
		<apex:stylesheet value="{!URLFOR($Resource.Apttus__LightningResource, 'css/sendforreview.css')}" />
        <apex:includeScript value="{!URLFOR($Resource.Apttus__LightningResource, 'js/send-email-select-template.js')}" />
        <apex:includeScript value="{!URLFOR($Resource.Apttus__JQuery112Library, 'jquery-1.12.3.js')}"/>        
        <apex:include pageName="Apttus__ComplyJSLibInclude" />

        <script type="text/javascript" src="/soap/ajax/30.0/connection.js"></script>
        <script type="text/javascript" src="/soap/ajax/30.0/apex.js"></script>
        
    
        <apex:stylesheet value="{!URLFOR($Resource.Apttus__YUILibrary, '/yui/build/assets/skins/sam/skin.css')}" />
        <apex:includescript value="{!URLFOR($Resource.Apttus__YUILibrary, '/yui/build/yahoo-dom-event/yahoo-dom-event.js')}" />
        <apex:includescript value="{!URLFOR($Resource.Apttus__YUILibrary, '/yui/build/dragdrop/dragdrop-min.js')}" />
        <apex:includescript value="{!URLFOR($Resource.Apttus__YUILibrary, '/yui/build/container/container-min.js')}" />
        <apex:includescript value="{!URLFOR($Resource.Apttus__YUILibrary, '/yui/build/animation/animation-min.js')}" />
        
		<style>
		.slds .slds-table:not(.slds-no-row-hover) tr:hover > td {
			background-color: #005fb2 !important;     
			color: white!important;
		}  
		</style>
        <apex:slds />
    
        <script type="text/javascript"> 

            var protect = "{!protect}";
            var unprotect = "{!unprotect}";
            //var userAction = "{!userAction}";
            var emailAuthorURL = "{!JSENCODE(emailAuthorURL)}";
            var isParallelReview = "{!isParallelReview}";             
            var selectedTemplateId;
            var attachmentIds;
            var pLevel;
            
            var cPROTECTION_LEVEL_IGNORE = "Ignore";
            
            var selectRadioId = "";

            /**
             * Prepare email template
            `* - clone selected email template
             * - clone and add selected attachments to the cloned template
             * - apply protection if applicable
             * - launch email author page
             */
             function prepareTemplate() {            
                // temp email template
                var newTemplateId = null;
                // temporary object
                var tempObjectId = null;
                
                try {
                    initCall("{!$Api.Session_ID}");
                    
                    var applyProtection = ((protect == "true" && cPROTECTION_LEVEL_IGNORE != pLevel) || unprotect == "true");
                     
                    // clone email template
                    newTemplateId = cloneEmailTemplate(selectedTemplateId);
                    
                    if(isParallelReview == 'false') {
                        // associate selected attachments to the new email template
                        var strIds = new String(attachmentIds);
                        
                        // Use a temp object to get around html editing security. 
                        // copy attachments to a temp object and use the temp object for protect/unprotect operation. 
                        // copy attachments back to the email template after the protect/unprotect operation is done.
                        
                        // create a temporary object
                        if (applyProtection) {
                            
                            tempObjectId = createTemporaryObject();
                            // copy attachments to the temporary object
                            var tempAttIds = copyAttachments(tempObjectId, strIds.split(','));
                        
                            // apply/remove protection, if applicable
                            if ((protect == "true") && (cPROTECTION_LEVEL_IGNORE != pLevel)) { 
                                protectTemporaryDocs(tempObjectId, pLevel);
                                
                            } else if (unprotect == "true"){
                                unprotectTemporaryDocs(tempObjectId);
                                
                            }
                            
                            //get new attachment/file ids for temp object, which are created by merge server
                            var tempNewAttIds = getAttachmentIDsForParent(tempObjectId);
                        
                            // copy attachments to the email template
                            copyAttachments(newTemplateId, tempNewAttIds);
                            
                        } else {
                            
                            // copy attachments to the email template
                            copyAttachments(newTemplateId, strIds.split(','));
                            
                        }
                    }
                    
                    // substitute new template id and request email author page
                    var tempId = newTemplateId.valueOf(0, 15);
                    var url = emailAuthorURL.replace(/__NEW_TEMPLATE_ID_16CHARS__/g, tempId);
                    url = url.replace(/__STEPNUMBER__/g, '{!totalSteps}');
                    
                    console.log(" Author Page URL : "+emailAuthorURL);
                    console.log("Navigating to URL : "+url);

                    sforce.one.navigateToURL(url);

                } catch(ex) {        
                    erroralert("prepareTemplate()", ex);
                    
                    // delete temp email template if it was already created
                    if (newTemplateId != null) {
                        // invoke action on the controller
                        invokeDoDeleteTempEmailTemplate(newTemplateId);
                        
                    }
                    
                    // back to agreement detail page
                    goBack();
                    
                } finally {
                    
                    // delete temp object if it was already created
                    if (tempObjectId != null) {
                        // invoke action on the controller
                        invokeDoDeleteTempObject(tempObjectId);
                        
                    }
                    
                }
                
            }
            
            /**
             * Go back to the detail page
             */
            function goBack() {
                // get the agreement id
                var agreementId = "{!agreementSO.Id}";
                sforce.connection.sessionId = "{!$Api.Session_ID}"; //to avoid session timeout
                // go back to the detail page
                navigateTo("/" + agreementId);
                
            }
        
        </script>
    </head>
    <body>
        <apex:form >

                <!-- Wizard header -->
                <div class="slds">
					<!--spinner-->
					<div class="spinner">
                        <img class="slds-spinner--medium spinnerImg " src="https://www.lightningdesignsystem.com/assets/images/spinners/slds_spinner_brand.gif" alt="..." />
                    </div>
                    
                    <!-- page header -->
                    <div class="slds-page-header">
                        <div class="slds-page-header__row">
                            <div class="slds-page-header__col-title">
                                <div class="slds-media">
                                    <div class="slds-media__figure">
                                        <span class="slds-icon_container">
                                            <!--image-->
                                            <img src="{!URLFOR($Resource.ParallelReviewResource, 'ParallelReviewResource/ParallelReview/icons/ReviewCycle.png')}" alt="Review Cycle" class="pageTitleIcon" title="{!$Label.ReviewCycle}"/>
                                        </span>
                                    </div>
                                
                                    <!-- header title -->
                                    <div class="slds-media__body">
                                        <div class="slds-page-header__name">
                                            <div class="slds-page-header__name-title">
                                                <h1>
                                                    <span class="slds-page-header__name-meta">{!reviewTitle}</span>
                                                </h1>
                                            </div>
                                        </div>
                                        
                                        <!-- agreement name -->
                                        <p class="slds-page-header__title slds-truncate">
                                            <apex:outputText value="{!Apttus__APTS_Agreement__c.Name}"/> 
                                        </p>
                                    </div>
                                    
                                    <!-- cancel button -->
                                    <div class="slds-grid slds-grid_align-end">
                                        <apex:commandButton styleclass="slds-button slds-button--neutral"  value="{!$Label.apttus__cancel}"  action="{!doCancel}" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div> <!-- end page header -->

                    <!-- body -->
                    <apex:outputPanel layout="block" styleClass="slds-brand-band slds-brand-band_cover slds-brand-band_medium">
                        <div class="pageBody">
                            
                            <!-- section to display error messages -->
                            <div class="visibleeror"> 
                                <h2 class="error">
                                    <apex:pageMessages />   
                                </h2>    
                            </div> 
                        
                            <!-- section header -->
                            <div class="pageSectionHeader slds-grid">
     
                                <!-- step title -->
                                <div class="pageStepTitle">{!stepTitle}</div>
     
                                <!-- progress indicator --> 
                                <apex:outputPanel rendered="{!totalStepsProgressIndicator.size > 0}" layout="block" styleClass="progressIndicatorPanel slds-progress">
                                    <ol class="slds-progress__list">
                                        <apex:repeat value="{!totalStepsProgressIndicator}" var="Step">
                                       
                                            <li class="slds-progress__item {!IF(currentStepNumber == Step, 'slds-is-active','' )} {!IF(currentStepNumber > Step, 'slds-is-completed','' )}">
                                                <apex:outputPanel rendered="{!AND(currentStepNumber == Step, NOT(errorsPresent))}">
                                                    <div class="progressIndicatorToolTip slds-popover slds-popover_tooltip slds-nubbin_bottom-left" role="tooltip" id="step-{!Step}-tooltip">
                                                        <div class="slds-popover__body">{!$Label.SelectEmailTemplateOptional}</div>
                                                    </div>
													<span class="slds-button slds-progress__marker" aria-describedby="step-{!Step}-tooltip">
														<span class="slds-assistive-text"></span>
													</span>
                                                </apex:outputPanel>
												<apex:outputPanel rendered="{!currentStepNumber > Step}">
													<button onclick="return false;" class="slds-button slds-button_icon slds-button_icon slds-progress__marker slds-progress__marker_icon">
														<img src="{!URLFOR($Resource.LightningResource, 'images/success.png')}"/>
														<span class="slds-assistive-text"></span>
													</button>
												</apex:outputPanel>
                                                
                                            </li>
                                        </apex:repeat>
                                    </ol>
                                    <div class="slds-progress-bar slds-progress-bar_x-small" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0"
                                     role="progressbar">
                                        <span class="slds-progress-bar__value" style="width: {!(currentStepNumber-1)/(totalSteps - 1) * 100}%"></span>
                                    </div>
                                </apex:outputPanel>
  
                                <!-- next and previous buttons -->
                                <div class="rightButtonsPanel">                        
                                    <apex:commandButton styleclass="displayInline slds-button slds-button--brand" action="{!onPrevious}" value="{!$Label.apttus__previous}"  /> &nbsp;
                                    
                                    <apex:commandButton id="cmdButtonDoPrepareEmailTemplate"
                                                    styleclass="displayInline slds-button slds-button--brand"
                                                    action="{!doValidateEmailTemplateSelection}" 
                                                    value="{!$Label.apttus__next}"  
                                                    rendered="{!showStep4 && NOT(SkipEmailTemplateSelection)}"
                                                    oncomplete="$('.spinner').show(); doPrepareEmailTemplate('{!JSENCODE(emailTemplateId)}', '{!JSENCODE(attachmentIds)}', '{!JSENCODE(protectionLevel)}');" />
    
                                </div>
                            </div> <!-- end section header -->
                            
                            <!-- help text section -->
                            <div class="paddingCls">
								<apex:outputText value="{!$Label.apttus__sendforreviewemailtemplatestephelptext}{!receipientTitle}."/>
                            </div>
     
                            <div class="paddingCls">
                                
                                <!-- folders -->
                                <apex:outputpanel id="idFolderSelectionPanel" rendered="{!showStep4}" >
                                    <apex:panelGrid columns="1">
                                        <apex:panelGroup >
                                            <apex:selectList style="width:20%" styleClass="slds-select" id="idFolders" 
                                                             value="{!folderId}" 
                                                             size="1"  
                                                             onchange="invokeDoEmailTemplateSearch();">
                                                <apex:selectOptions value="{!folders}" />
                                            </apex:selectList>
                                        </apex:panelGroup>
                                    </apex:panelGrid>
                                </apex:outputpanel> <br/>
                                
                                <!-- email templates -->
                                <apex:outputPanel id="idTemplatesPanel">
                                    <div class="slds-scrollable--x">
                                        <apex:dataTable value="{!templates}" var="templateData" id="idTemplateTable"
                                                        styleClass="slds-table slds-table--bordered" 
                                                        rowClasses="temContent">
                                             
                                          
                                             
                                            <apex:column onclick="invokeDoSelectEmailTemplate('{!templateData.emailTemplate.id}')" styleClass="{!IF(templateData.selected, 'temContent selectedTr selectedTd','')}">
                                                <apex:facet name="header">{!$Label.apttus__select}</apex:facet>
                                                
                                                
                                                    
                                            </apex:column>
                                            <apex:column onclick="invokeDoSelectEmailTemplate('{!templateData.emailTemplate.id}')" styleClass="{!IF(templateData.selected, 'temContent selectedTr selectedTd','')}">
                                                <apex:facet name="header">{!$Label.apttus__name}</apex:facet>
                                                <apex:outputText value="{!templateData.emailTemplate.Name}" />
                                                
                                            </apex:column>
                                            <apex:column onclick="invokeDoSelectEmailTemplate('{!templateData.emailTemplate.id}')" styleClass="{!IF(templateData.selected, 'temContent selectedTr selectedTd','')}">
                                                <apex:facet name="header">{!$Label.apttus__templatetype}</apex:facet>
                                                <apex:outputText value="{!templateData.emailTemplate.TemplateType}" />
                                            </apex:column>
                                            
                                            <apex:column onclick="invokeDoSelectEmailTemplate('{!templateData.emailTemplate.id}')" styleClass="{!IF(templateData.selected, 'temContent selectedTr selectedTd','')}">
                                                <apex:facet name="header">{!$Label.apttus__description}</apex:facet>
                                                <apex:outputText value="{!templateData.emailTemplate.Description}" />
                                            </apex:column>
                                        </apex:dataTable>
                                    </div>
                                    <apex:outputPanel layout="block" style="margin-top:4%; text-align:center" rendered="{!if(templates == null || templates.size == 0, '','1')}"> 
                                       {!$Label.apttus__sendforreviewnotemplates}
                                    </apex:outputPanel> 
                                </apex:outputPanel> 
                            </div>
                        </div>
                    </apex:outputPanel>
                </div>

            <!-- check and perform email authoring step -->
            <apex:outputPanel >
                <script>
                // check if email authoring step
                var isEmailAuthoringStep = "{!IsEmailAuthoringStep}";
                
                if (isEmailAuthoringStep.toLowerCase() == 'true') {
                    
                    $('.spinner').show();
                    // prepare the template
                    doPrepareEmailTemplate('{!JSENCODE(emailTemplateId)}', '{!JSENCODE(attachmentIds)}', '{!JSENCODE(protectionLevel)}');
                    
                }
                
                </script>
            </apex:outputPanel>
            <apex:actionFunction name="invokeDoEmailTemplateSearch"  
                                 action="{!doEmailTemplateSearch}" 
                                 status="waitStatus"
                                 reRender="idTemplateTable, idButtonsTopPanel, idButtonsBottomPanel" />
            
            <apex:actionFunction name="invokeDoSelectEmailTemplate" 
                                 action="{!doSelectEmailTemplate}" 
                                 reRender="idButtonsTopPanel, idButtonsBottomPanel">
                <apex:param name="param" assignTo="{!emailTemplateId}" value="" />
            </apex:actionFunction>   
            
            <apex:actionFunction name="invokeDoDeleteTempEmailTemplate" 
                                 action="{!doDeleteTempEmailTemplate}" 
                                 reRender="dummy"> 
                <apex:param name="param" assignTo="{!tempEmailTemplateId}" value="" />
            </apex:actionFunction>      
            
            <apex:actionFunction name="invokeDoDeleteTempObject" 
                                 action="{!doDeleteTempObject}" 
                                 reRender="dummy"> 
                <apex:param name="param" assignTo="{!tempObjectId}" value="" />
            </apex:actionFunction>      
            <script>
                initTableSelector();
                 
            </script>
        </apex:form>
    </body>
</apex:page>